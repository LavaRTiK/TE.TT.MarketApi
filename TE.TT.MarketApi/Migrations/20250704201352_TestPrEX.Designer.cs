// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TE.TT.MarketApi.Database;

#nullable disable

namespace TE.TT.MarketApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250704201352_TestPrEX")]
    partial class TestPrEX
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.AssetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Exchange")
                        .HasColumnType("longtext");

                    b.Property<string>("Kind")
                        .HasColumnType("longtext");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext");

                    b.Property<double?>("TickSize")
                        .HasColumnType("double");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.ExchangeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.Gics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("IndustryGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SubIndustryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Gics");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingAlpaca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("DefualtOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Exchange")
                        .HasColumnType("longtext");

                    b.Property<int?>("MaxOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.ToTable("MappingAlpaca");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingDxfeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("DefualtOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Exchange")
                        .HasColumnType("longtext");

                    b.Property<int?>("MaxOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.ToTable("MappingDxfeed");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingOanda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("DefualtOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Exchange")
                        .HasColumnType("longtext");

                    b.Property<int?>("MaxOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.ToTable("MappingOanda");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingSimulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("DefualtOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Exchange")
                        .HasColumnType("longtext");

                    b.Property<int?>("MaxOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.ToTable("MappingSimulation");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.TradingHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AlpacaMappingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DxfeedMappingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ElectronicEnd")
                        .HasColumnType("longtext");

                    b.Property<string>("ElectronicStart")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OandaMappingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RegularEnd")
                        .HasColumnType("longtext");

                    b.Property<string>("RegularStart")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SimulationMappingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateData")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AlpacaMappingId")
                        .IsUnique();

                    b.HasIndex("DxfeedMappingId")
                        .IsUnique();

                    b.HasIndex("OandaMappingId")
                        .IsUnique();

                    b.HasIndex("SimulationMappingId")
                        .IsUnique();

                    b.ToTable("TradingHours");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.ExchangeEntity", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.Provider", "Provider")
                        .WithMany("Exchanges")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.Gics", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.Profile", "Profile")
                        .WithOne("Gics")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.Gics", "ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingAlpaca", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.AssetEntity", "Asset")
                        .WithOne("Alpaca")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.MappingAlpaca", "AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingDxfeed", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.AssetEntity", "Asset")
                        .WithOne("Dxfeed")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.MappingDxfeed", "AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingOanda", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.AssetEntity", "Asset")
                        .WithOne("Oanda")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.MappingOanda", "AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingSimulation", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.AssetEntity", "Asset")
                        .WithOne("Simulation")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.MappingSimulation", "AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.Profile", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.AssetEntity", "Asset")
                        .WithOne("Profile")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.Profile", "AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.TradingHours", b =>
                {
                    b.HasOne("TE.TT.MarketApi.Database.Entity.MappingAlpaca", "AlpacaMapping")
                        .WithOne("TradingHours")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.TradingHours", "AlpacaMappingId");

                    b.HasOne("TE.TT.MarketApi.Database.Entity.MappingDxfeed", "DxfeedMapping")
                        .WithOne("TradingHours")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.TradingHours", "DxfeedMappingId");

                    b.HasOne("TE.TT.MarketApi.Database.Entity.MappingOanda", "OandaMapping")
                        .WithOne("TradingHours")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.TradingHours", "OandaMappingId");

                    b.HasOne("TE.TT.MarketApi.Database.Entity.MappingSimulation", "SimulationMapping")
                        .WithOne("TradingHours")
                        .HasForeignKey("TE.TT.MarketApi.Database.Entity.TradingHours", "SimulationMappingId");

                    b.Navigation("AlpacaMapping");

                    b.Navigation("DxfeedMapping");

                    b.Navigation("OandaMapping");

                    b.Navigation("SimulationMapping");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.AssetEntity", b =>
                {
                    b.Navigation("Alpaca");

                    b.Navigation("Dxfeed");

                    b.Navigation("Oanda");

                    b.Navigation("Profile");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingAlpaca", b =>
                {
                    b.Navigation("TradingHours");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingDxfeed", b =>
                {
                    b.Navigation("TradingHours");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingOanda", b =>
                {
                    b.Navigation("TradingHours");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.MappingSimulation", b =>
                {
                    b.Navigation("TradingHours");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.Profile", b =>
                {
                    b.Navigation("Gics");
                });

            modelBuilder.Entity("TE.TT.MarketApi.Database.Entity.Provider", b =>
                {
                    b.Navigation("Exchanges");
                });
#pragma warning restore 612, 618
        }
    }
}
